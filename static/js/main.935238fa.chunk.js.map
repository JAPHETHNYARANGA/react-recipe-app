{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mPAgBeA,EAbD,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,SAASC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,YACjC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACA,6BAAMN,IACN,6BACCG,EAAYI,KAAI,SAAAC,GAAU,OAAI,6BAAKA,EAAWC,YAE/C,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMH,MAAMQ,IAAKR,EAAOS,IAAK,SC+CtCC,G,MArDH,WAEV,IAFgB,EAKWC,mBAAS,IALpB,mBAKXC,EALW,KAKFC,EALE,OAMUF,mBAAS,IANnB,mBAMXG,EANW,KAMHC,EANG,OAOSJ,mBAAS,WAPlB,mBAOVK,EAPU,KAOHC,EAPG,KAUjBC,qBAAU,WACTC,MAEE,CAACH,IAEJ,IAAMG,EAAU,uCAAE,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAdd,WAcc,oBAbd,qCAYE,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJD,2CAAF,qDAkBf,OACE,sBAAKvB,UAAU,MAAf,UACD,uBAAM0B,SARS,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKkBb,UAAU,cAArC,UACA,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAbtC,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAanB,wBAAQ9B,UAAU,gBAAgB6B,KAAK,SAAvC,uBAEA,qBAAK7B,UAAU,UAAf,SACCU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEAN,MAAOM,EAAOA,OAAO+B,MACpBpC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJvBG,EAAOA,OAAO+B,iBCnCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.935238fa.chunk.js","sourcesContent":["import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe =({title,calories,image,ingredients}) =>{\n    return(\n        <div className={style.recipe}>\n        <h1 >{title}</h1>\n        <ol>\n        {ingredients.map(ingredient =>(<li>{ingredient.text}</li>))}\n        </ol>\n        <p>{calories}</p>\n        <img className={style.image}src={image} alt =\"\"/>\n        </div>\n    );\n}\n\nexport default Recipe;","import React,{useEffect, useState} from \"react\"; \nimport Recipe from './Recipe';\nimport './App.css';\n\n\nconst App = () => {\n\n  const APP_ID = 'c8ae1805';\n  const APP_KEY ='bdcaf7846e4480d0944e07e75df93ebe';\n\n const[recipes, setRecipes]= useState([]);\n const[search, setSearch] = useState('');\n const [query, setQuery] = useState('chicken');\n\n\n useEffect(() =>{\n  getRecipes();\n\n }, [query]);\n \n const getRecipes= async () =>{\n   const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n   const data = await response.json();\n   setRecipes(data.hits);\n   console.log(data.hits);\n \n };\n \n const updateSearch = e =>{\n   setSearch(e.target.value);\n\n }\nconst getSearch = e =>{\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n  return(\n    <div className=\"App\">\n   <form onSubmit={getSearch} className=\"search-form\">\n   <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n   <button className=\"search-button\" type=\"submit\">search</button>\n   </form>\n   <div className=\"recipes\">\n   {recipes.map(recipe=>(\n     <Recipe \n     key={recipe.recipe.label}\n     title={recipe.recipe.label}\n      calories={recipe.recipe.calories} \n      image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}/>\n   ))}\n   </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}